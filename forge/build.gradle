architectury {
	platformSetupLoomIde()
	forge()
}

loom {
	accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "fallingtrees-common.mixins.json"
        mixinConfig "fallingtrees.mixins.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"

    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    modApi("me.pandamods:pandalib-forge:${rootProject.pandalib_version}")

	if (minecraft_version != "1.19.2") {
		modCompileOnly("maven.modrinth:jade:${jade_version}+forge-forge,${jade_minecraft_version}")
//        modLocalRuntime("maven.modrinth:jade:${jade_version}+forge-forge,${jade_minecraft_version}")
	} else {
		modCompileOnly("maven.modrinth:jade:${jade_version}-forge,${jade_minecraft_version}")
//        modLocalRuntime("maven.modrinth:jade:${jade_version}-forge,${jade_minecraft_version}")
	}

	if (MC_VER <= MC_1_20) {
		modCompileOnly("maven.modrinth:treechop:${rootProject.hts_treechop_version}-forge,${rootProject.hts_treechop_minecraft_version}")
//	    modRuntimeOnly("maven.modrinth:treechop:${rootProject.hts_treechop_version}-forge,${rootProject.hts_treechop_minecraft_version}")
	}
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    injectAccessWidener = true
}
