plugins {
    id "com.github.johnrengelman.shadow"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    maven { url = "https://maven.terraformersmc.com/releases/" }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    modApi("me.pandamods:pandalib-fabric:${rootProject.pandalib_version}")
    modApi("com.terraformersmc:modmenu:${rootProject.modmenu_version}")

    modCompileOnly("maven.modrinth:jade:${rootProject.jade_version}-fabric,${rootProject.jade_minecraft_version}")
//    modLocalRuntime("maven.modrinth:jade:${rootProject.jade_version}-fabric,${rootProject.jade_minecraft_version}")

    modCompileOnly("maven.modrinth:treechop:${rootProject.hts_treechop_version}-fabric,${rootProject.hts_treechop_minecraft_version}")
//    modRuntimeOnly("maven.modrinth:treechop:${rootProject.hts_treechop_version}-fabric,${rootProject.hts_treechop_minecraft_version}")

    include api("org.joml:joml:1.10.5")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property 'version', rootProject.mod_version

    filesMatching('fabric.mod.json') {
        expand version: rootProject.mod_version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    injectAccessWidener = true
}