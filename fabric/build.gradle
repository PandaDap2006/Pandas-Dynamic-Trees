architectury {
	platformSetupLoomIde()
	fabric()
}

loom {
	accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
	common
	shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentFabric.extendsFrom common
}

repositories {
	maven { url = "https://maven.terraformersmc.com/releases/" }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"

    modApi "dev.architectury:architectury-fabric:${architectury_version}"

    modApi("me.pandamods:pandalib-fabric:${pandalib_version}")
    modApi("com.terraformersmc:modmenu:${modmenu_version}")

	if (minecraft_version != "1.19.2") {
		modCompileOnly("maven.modrinth:jade:${jade_version}+fabric-fabric,${jade_minecraft_version}")
//        modLocalRuntime("maven.modrinth:jade:${jade_version}+fabric-fabric,${jade_minecraft_version}")
	} else {
		modCompileOnly("maven.modrinth:jade:${jade_version}-fabric,${jade_minecraft_version}")
//        modLocalRuntime("maven.modrinth:jade:${jade_version}-fabric,${jade_minecraft_version}")
	}

	if (MC_VER <= MC_1_20) {
		modCompileOnly("maven.modrinth:treechop:${hts_treechop_version}-fabric,${hts_treechop_minecraft_version}")
//		modRuntimeOnly("maven.modrinth:treechop:${hts_treechop_version}-fabric,${hts_treechop_minecraft_version}")
	}

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    injectAccessWidener = true
}