plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.6-SNAPSHOT" apply false
    id "io.github.pacifistmc.forgix" version "1.2.9"
}

architectury {
    minecraft = minecraft_version
}

forgix {
    group = "me.pandamods.fallingtrees"
    mergedJarName = "fallingtrees-${mod_version}-${minecraft_version}.jar"
    outputDir = "build/libs/merged"

//    forge {
//        projectName = "forge"
//        jarLocation = "build/libs/fallingtrees-${mod_version}.jar"
//    }

    fabric {
        projectName = "fabric"
        jarLocation = "build/libs/fallingtrees-${mod_version}.jar"
    }

    neoforge {
        projectName = "neoforge"
        jarLocation = "build/libs/fallingtrees-${mod_version}.jar"
    }
}

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${minecraft_version}"
		mappings loom.layered() {
			officialMojangMappings()
			parchment("org.parchmentmc.data:parchment-${parchment_version}@zip")
		}
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    base {
        archivesName = archives_base_name
    }

    version = mod_version
    group = maven_group

    repositories {
        maven { url "https://maven.neoforged.net/releases/" }
		maven {
			name = "ParchmentMC"
			url = "https://maven.parchmentmc.org"
		}
        exclusiveContent {
            forRepository {
                maven {
                    name = "Modrinth"
                    url = "https://api.modrinth.com/maven"
                }
            }
            filter {
                includeGroup "maven.modrinth"
            }
        }
        mavenLocal()
	}

    processResources {
        inputs.property "version", project.version

        filesMatching(["fabric.mod.json", "META-INF/mods.toml", "META-INF/neoforge.mods.toml", "pack.mcmeta"]) {
            expand "version": project.version
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 21
    }

    java {
        withSourcesJar()
    }
}
