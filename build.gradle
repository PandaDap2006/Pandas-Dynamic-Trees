plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.6-SNAPSHOT" apply false
    id "com.github.johnrengelman.shadow" version "8.1.1" apply false
    id "io.github.pacifistmc.forgix" version "1.2.9"
}

architectury {
    minecraft = rootProject.minecraft_version
}

forgix {
    var version = "${rootProject.mod_version}-${rootProject.minecraft_version}"
    group = "${rootProject.maven_group}.${rootProject.archives_name}"
    mergedJarName = "${rootProject.archives_name}-${version}.jar"
    outputDir = "build/libs/merged"

    if (findProject(":fabric"))
        fabric {
            jarLocation = "build/libs/${rootProject.archives_name}-fabric-${version}.jar"
        }

    if (findProject(":forge"))
        forge {
            jarLocation = "build/libs/${rootProject.archives_name}-forge-${version}.jar"
        }

    if (findProject(":neoforge"))
        neoforge {
            jarLocation = "build/libs/${rootProject.archives_name}-neoforge-${version}.jar"
        }

    removeDuplicate "me.pandamods.fallingtrees"
}

allprojects {
    group = rootProject.maven_group
    version = "${rootProject.mod_version}-${rootProject.minecraft_version}"
}

subprojects {
    apply plugin: "dev.architectury.loom"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    base {
        archivesName = "${rootProject.archives_name}-${project.name}"
    }

    repositories {
        maven {
            name = "ParchmentMC"
            url = "https://maven.parchmentmc.org"
        }
        exclusiveContent {
            forRepository {
                maven {
                    name = "Modrinth"
                    url = "https://api.modrinth.com/maven"
                }
            }
            filter {
                includeGroup "maven.modrinth"
            }
        }
        mavenLocal()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
		mappings loom.layered() {
			officialMojangMappings()
			parchment("org.parchmentmc.data:parchment-${rootProject.parchment_version}@zip")
		}
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        options.release = 21
    }

    java {
        withSourcesJar()
    }
}
