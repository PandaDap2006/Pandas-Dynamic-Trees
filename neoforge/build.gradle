architectury {
    platformSetupLoomIde()
    neoForge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

repositories {
    maven {
        name = "NeoForged"
        url = "https://maven.neoforged.net/releases"
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:${neoforge_version}"

    modApi "dev.architectury:architectury-neoforge:${architectury_version}"

    modApi("me.pandamods:pandalib-neoforge:${pandalib_version}")

    modCompileOnly("maven.modrinth:jade:${jade_version}+neoforge-neoforge,${jade_minecraft_version}")
//    modRuntimeOnly("maven.modrinth:jade:${jade_version}+neoforge-neoforge,${jade_minecraft_version}")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    injectAccessWidener = true
    atAccessWideners.add(loom.accessWidenerPath.get().asFile.name)
}